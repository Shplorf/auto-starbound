#!/bin/bash
# /etc/init.d/starbound
# version 0.1.1 2016-07-24 (YYYY-MM-DD)

### BEGIN INIT INFO
# Provides:   starbound
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Starbound server
# Description:    Manages the starbound server
### END INIT INFO

#Settings
SERVICE='./starbound_server'
OPTIONS=''
USERNAME='steam'
SBPATH='/home/steam/starbound'
SB_START_PATH="${SBPATH}/linux"
INVOCATION=" ${SERVICE} ${OPTIONS}"
STEAMPATH='/home/steam'
STEAMUSER="{{ steam_user }}"
SLEEP_TIME=7
ME=$(whoami)

as_user() {
    if [ "${ME}" == "${USERNAME}" ]; then
        bash -c "$1"
    else
        su -l ${USERNAME} -c "$1"
    fi
}

sb_start() {
    if ps ax | grep -v grep | grep -v -i SCREEN | grep ${SERVICE}$ > /dev/null; then
        echo "[$(date +%Y-%m-%H\ %k:%M:%S)] ${SERVICE} is already running!"
    else
        echo "[$(date +%Y-%m-%H\ %k:%M:%S)] Starting ${SERVICE}..."
        cd ${SB_START_PATH}
        as_user "cd ${SB_START_PATH} && screen -dmS starbound ${INVOCATION}"
        sleep ${SLEEP_TIME}
        if ps ax | grep -v grep | grep -v -i SCREEN | grep ${SERVICE}$ > /dev/null; then
            echo "[$(date +%Y-%m-%H\ %k:%M:%S)] ${SERVICE} is now running."
        else
            echo "[$(date +%Y-%m-%H\ %k:%M:%S)] Error! Could not start ${SERVICE}!"
        fi
    fi
}

sb_stop() {
    if ps ax | grep -v grep | grep -v -i SCREEN | grep ${SERVICE}$ > /dev/null; then
        echo "[$(date +%Y-%m-%H\ %k:%M:%S)] Stopping ${SERVICE}"
        as_user "screen -p 0 -S starbound -X quit"
        sleep ${SLEEP_TIME}
    else
        echo "[$(date +%Y-%m-%H\ %k:%M:%S)] ${SERVICE} was not running."
    fi
        if ps ax | grep -v grep | grep -v -i SCREEN | grep ${SERVICE}$ > /dev/null; then
            echo "[$(date +%Y-%m-%H\ %k:%M:%S)] Error! ${SERVICE} could not be stopped."
        else
            echo "[$(date +%Y-%m-%H\ %k:%M:%S)] ${SERVICE} is stopped."
        fi
}

sb_update() {
    if ps ax | grep -v grep | grep -v -i SCREEN | grep ${SERVICE}$ > /dev/null; then
        echo "[$(date +%Y-%m-%H\ %k:%M:%S)] ${SERVICE} is running! Will not start update."
    else
        cd ${STEAMPATH}
        read -s -p "Enter Steam Password: " STEAMPASS
        as_user "cd ${STEAMPATH} && ./steamcmd.sh +login ${STEAMUSER} ${STEAMPASS} +force_install_dir ${SBPATH} +app_update 211820 +exit"
        echo "[$(date +%Y-%m-%H\ %k:%M:%S)] Starbound was updated (hopefully)."
    fi
}

#Start-Stop here
case "$1" in
    start)
        sb_start
    ;;
    stop)
        sb_stop
    ;;
    restart)
        sb_stop
        sb_start
    ;;
    update)
        sb_stop
        sb_update
        sb_start
    ;;
    status)
        if ps ax | grep -v grep | grep -v -i SCREEN | grep ${SERVICE}$ > /dev/null; then
            echo "[$(date +%Y-%m-%H\ %k:%M:%S)] ${SERVICE} is running."
        else
            echo "[$(date +%Y-%m-%H\ %k:%M:%S)] ${SERVICE} is not running."
        fi
    ;;

    *)
        echo "Usage: starbound {start|stop|update|status|restart}"
        exit 1
        ;;
esac

exit 0